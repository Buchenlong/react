{"version":3,"sources":["pages/Input.js","pages/List.js","pages/TodoList.js","index.js"],"names":["Input","htmlFor","id","ref","inp","input","value","this","props","todos","inpValue","type","onChange","handleChange","onClick","addTodo","React","Component","List","renderTodos","done","map","todo","idx","key","toggle","bind","defaultChecked","title","delTodo","TodoList","setState","state","newTodos","JSON","parse","stringify","filter","item","index","e","target","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"6KAkBeA,E,uKAfF,IAAD,OACJ,OAAO,6BACH,2BAAOC,QAAQ,OAAf,YACA,2BACQC,GAAG,MACHC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACvBE,MAAOC,KAAKC,MAAMC,MAAMC,SACxBC,KAAK,OACLC,SAAUL,KAAKC,MAAMK,eAEzB,4BAAQC,QAASP,KAAKC,MAAMO,SAA5B,qB,GAXIC,IAAMC,W,OCuCXC,E,4MApCXC,YAAc,SAACC,GACP,OAAO,EAAKZ,MAAMC,MAAMA,MAAMY,KAAI,SAACC,EAAKC,GACpC,GAAGH,GAAME,EAAKF,KACV,OAAO,wBAAII,IAAKD,GACZ,2BAAOZ,KAAK,WACRG,QAAS,EAAKN,MAAMiB,OAAOC,KAAlB,eAA6BH,GAAMI,eAAgBP,IAChE,8BAAOE,EAAKM,OACZ,4BACId,QAAS,EAAKN,MAAMqB,QAAQH,KAAnB,eAA6BH,IAD1C,qB,uDAchB,OAAO,6BACH,wDACI,4BACKhB,KAAKY,aAAY,IAEtB,wDACA,4BACKZ,KAAKY,aAAY,S,GA/BnBH,IAAMC,WC0EVa,E,kDAtEX,aAAc,IAAD,8BACT,gBA0BJf,QAAU,WACN,EAAKgB,SAAS,CACVtB,MAAM,CACF,CACImB,MAAO,EAAKI,MAAMtB,SAClBU,MAAM,IAHT,mBAKE,EAAKY,MAAMvB,UAGtB,EAAKuB,MAAMtB,SAAW,IArCb,EAuCbe,OAAS,SAACF,GACN,IAAIU,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKJ,MAAMvB,QACpDwB,EAASV,GAAKH,MAAQa,EAASV,GAAKH,KACpC,EAAKW,SAAS,CAACtB,MAAMwB,KA1CZ,EA4CbJ,QAAU,SAACN,GAIP,EAAKQ,SAAS,CACVtB,MAAO,EAAKuB,MAAMvB,MAAM4B,QAAO,SAACC,EAAKC,GAAN,OAAcA,GAAOhB,QAjD/C,EAoDbV,aAAe,SAAC2B,GACZ,EAAKT,SAAS,CAACrB,SAAS8B,EAAEC,OAAOnC,SAnDjC,EAAK0B,MAAQ,CACTtB,SAAU,GACVD,MAAM,CACF,CAACmB,MAAM,IAAIR,MAAK,GAChB,CAACQ,MAAM,IAAIR,MAAK,GAChB,CAACQ,MAAM,IAAIR,MAAK,GAChB,CAACQ,MAAM,IAAIR,MAAK,KARf,E,gEAaT,IAAIX,EAAQiC,aAAaC,QAAQ,SAC9BlC,GACCF,KAAKwB,SAAS,CACVtB,MAAMyB,KAAKC,MAAM1B,O,2CASzB,OAJAiC,aAAaE,QACT,QACAV,KAAKE,UAAU7B,KAAKyB,MAAMvB,SAEvB,I,+BA+BD,IAAD,EACoBF,KAAKyB,MADzB,EACEvB,MADF,EACQC,SAGb,OAAQ,6BACJ,kBAAC,EAAD,CAAOD,MAAOF,KAAKyB,MAAOjB,QAASR,KAAKQ,QAAQW,KAAKnB,MAAOM,aAAcN,KAAKM,aAAaa,KAAKnB,QACjG,kBAAC,EAAD,CAAME,MAAOF,KAAKyB,MAAOP,OAAQlB,KAAKkB,OAAOC,KAAKnB,MAAOsB,QAAStB,KAAKsB,QAAQH,KAAKnB,a,GA/DzES,IAAMC,WCO7B4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.49660cae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Input extends React.Component{\r\n    render(){\r\n        return <div>\r\n            <label htmlFor=\"inp\">todolist</label>\r\n            <input \r\n                    id=\"inp\"\r\n                    ref={inp=>this.input = inp}\r\n                    value={this.props.todos.inpValue} \r\n                    type=\"text\" \r\n                    onChange={this.props.handleChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react'\r\n\r\nclass List extends React.Component{\r\n\r\n\r\n    renderTodos = (done)=>{\r\n            return this.props.todos.todos.map((todo,idx)=>{\r\n                if(done==todo.done){\r\n                    return <li key={idx}>\r\n                        <input type=\"checkbox\" \r\n                            onClick={this.props.toggle.bind(this, idx)} defaultChecked={done}/>\r\n                        <span>{todo.title}</span>\r\n                        <button \r\n                            onClick={this.props.delTodo.bind(this,idx)}\r\n                        >\r\n                            删除\r\n                        </button>\r\n                    </li>\r\n                }\r\n            })\r\n        \r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return <div>\r\n            <h2>正在进行</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default List;","import React from 'react'\r\nimport Input from './Input'\r\nimport List from './List'\r\n\r\n\r\nclass TodoList extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:true},\r\n                {title:'3',done:true},\r\n                {title:'4',done:false},\r\n            ]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos),\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n        return true;\r\n    }\r\n    addTodo = ()=>{\r\n        this.setState({\r\n            todos: [\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        });\r\n        this.state.inpValue = \"\";\r\n    }\r\n    toggle = (idx)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        newTodos[idx].done = !newTodos[idx].done;\r\n        this.setState({todos:newTodos});\r\n    }\r\n    delTodo = (idx)=>{\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n        this.setState({\r\n            todos: this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    \r\n    render() {\r\n        const {todos,inpValue} = this.state;\r\n        // let arr1 = todos.filter( item => !item.done)\r\n        // console.log(arr1);\r\n        return (<div>\r\n            <Input todos={this.state} addTodo={this.addTodo.bind(this)} handleChange={this.handleChange.bind(this)}/>\r\n            <List todos={this.state} toggle={this.toggle.bind(this)} delTodo={this.delTodo.bind(this)}/>\r\n        </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Home from './pages/Home';\n// import Control from './components/Control';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import Hoc,{Detail} from './pages/Hoc';\n// import Hook from './pages/Hook'\n// import Context from './pages/context'\nimport TodoList from './pages/TodoList'\n// console.log(Context);\n\nReactDOM.render(\n  <TodoList />,\n  document.getElementById('root')\n);\n\n\n// 实现带有本地存储的todolist功能（类组件实现）：\n\n// 最外层index.js里render(<TodoList/>,xx)\n// TodoList组件里包含Input和List两个组件\n// 输入框输入时不进行本地存储（使用componentDidUpdate）\n\n// 写完进行npm run build,将打包完的静态传到github，\n// 设置github pages，雪梨提交网页链接和四个文件的代码\n\n\n\n\n\n// alt shift + 上下键   复制一行\n// alt + 上下键         移动一行\n// 按住alt ，鼠标点击\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L \n\n// 组件声明\n// 函数组件\n// UI（展示）组件，木偶组件\n// function App(props){\n//   const { title, id } = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n// // 智能组件\n// class Demo extends React.Component{\n//   constructor(){\n//      super();\n//     //  声明状态\n//      this.state = {\n//        name: new Date().toLocaleString()\n//      }\n//      setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//      },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n\n\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'react'\n// )\n\n// 将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     // 解构\n//     const { type,props } = eleObj;\n//     // 创建第一层节点\n//     let ele = document.createElement(type);\n//     // 遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n//       console.log(prop)\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//             const txtNode = document.createTextNode(props.children);\n//             ele.appendChild(txtNode);\n//             break;\n//         }\n//         // 将第一层节点对象的子元素添加进去\n//         props.children.forEach( child => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//     }\n\n//     // 将第一层DOM节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n"],"sourceRoot":""}